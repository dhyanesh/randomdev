// BEGIN CUT HERE
// PROBLEM STATEMENT
// 
// You recently purchased a CD player from Bob's Bargain 
// Barn.  As you don't like listening to songs from your CDs 
// in the same order every day, you were very interested in 
// the "Random" button on the CD player.  According to the 
// instruction manual, if the CD player has n songs, the 
// "Random" feature works as follows:
// 
// Randomly select a permutation of the n songs.
// Play the songs in order from that permutation.
// Go to step 1.
// 
// Based on this algorithm, for 3 songs you could legally 
// obtain "ABCCAB" and "BCABCA", but not "AABBCC".
// 
// You are not sure if you trust Bob's Bargain Barn, so you 
// want to figure out if the CD player is broken or not.  
// However, as luck would have it, your sister had started 
// listening to the CD, so you don't know when the next 
// permutation begins.  This means that the list "BBAC" could 
// be an acceptable list, if the first B was the last song in 
// the first permutation, and the second B started the second 
// permutation. 
// 
// You will be given a vector <string> songlist containing 
// the list of songs that you heard.  Each distinct character 
// in songlist represents a single distinct song.  This 
// should be concatenated to form one string.  You will also 
// be given n, the number of songs on your CD.  If the entire 
// songlist could have been generated using the above 
// algorithm, return the earliest 0-based index in songlist 
// where a new permutation began.  If there are multiple 
// valid indices that could be the start of a permutation, 
// return the smallest of these.  If the songlist could not 
// have been generated by the algorithm described above, 
// return -1.  See the examples for clarification.
// 
// 
// DEFINITION
// Class:CDPlayer
// Method:isRandom
// Parameters:vector <string>, int
// Returns:int
// Method signature:int isRandom(vector <string> songlist, 
// int n)
// 
// 
// CONSTRAINTS
// -songlist will contain between 1 and 50 elements, inclusive.
// -Each element of songlist will contain between 1 and 50 
// characters, inclusive.
// -Each character in songlist will be one of the first n 
// uppercase letters ('A'-'Z').
// -n will be between 1 and 26, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {"BBAC"}
// 3
// 
// Returns: 1
// 
// The example from the problem statement.  The first song 
// cannot be the start of a permutation, since "BBA" is not a 
// permutation of "ABC".  However, if the permutation starts 
// at song 1, then "??B" and "BAC" are both valid.
// 
// 1)
// {"BACAB",
//  "BCA"}
// 3
// 
// Returns: 2
// 
// Index 0 is illegal because the second set of songs "ABB" 
// is illegal.  Similarly, index 1 can't be a legal start 
// ("BBC" is illegal).  Index 2 works though, since "?BA", 
// "CAB", "BCA" could be generated by the algorithm.
// 
// 2)
// {"AAACBACBACBACBACBACBACB"}
// 3
// 
// Returns: -1
// 
// Even though all of the songs starting at index 2 work, the 
// "?AA" that would have preceded it could not have been 
// generated; thus, the CD player is broken.
// 
// 3)
// {"ABCDEABDECBAECDEDACB"}
// 5
// 
// Returns: 0
// 
// 
// 
// 4)
// {"ABCABCABCABCABCABCABC",
//  "ABCABCABCABCABCABCABC"}
// 22
// 
// Returns: -1
// 
// 
// 
// 5)
// {"AAAAAAAAAAAAAAAA",
//  "AAAAAAAAAAAAAAAA",
//  "AAAAAAAAAAAAAAAA",
//  "AAAAAAAAAAAAAAAA",
//  "AAAAAAAAAAAAAAAA",
//  "AAAAAAAAAAAAAAAA",
//  "AAAAAAAAAAAAAAAA",
//  "AAAAAAAAAAAAAAAA",
//  "AAAAAAAAAAAAAAAA",
//  "AAAAAAAAAAAAAAAA"}
// 1
// 
// Returns: 0
// 
// 
// 
// 6)
// {"ADEF"}
// 12
// 
// Returns: 0
// 
// 
// 
// END CUT HERE
#line 138 "CDPlayer.cpp"
#include <string>   
#include <vector>   
#include <iostream>    
#include <sstream>    
#include <algorithm>   
#include <numeric>   
#include <functional>    
#include <map>    
#include <set>    
#include <cassert>   
#include <list>    
#include <deque>    
#include <iomanip>    
#include <cstring>    
#include <cmath>    
#include <cstdio>    
#include <cctype>   

using namespace std;   

#define fi(n) for(int i=0;i<(n);i++)
#define fj(n) for(int j=0;j<(n);j++)
#define f(i,a,b) for(int (i)=(a);(i)<(b);(i)++)

typedef vector <int> VI;   
typedef vector <string> VS;   
typedef vector <VI> VVI;   

bool check(int *a, int n) {
	int t = a[0];
	fi(n)
		if (a[i]!=t)
			return false;

	return true;
}

bool ok(string s, int n) {
	int c[30] = {0};

	fi(s.size()) {
		if (i%n == 0 && !check(c, n)) return false;
		c[s[i]-'A']++;
	}

	sort(c, c+n);

	if (c[n-1] >= c[0] + 2) return false;

	return true;
}

    class CDPlayer
        { 
        public: 
        int isRandom(vector <string> songlist, int n) 
            { 
							string s;
							fi(songlist.size())
								s+=songlist[i];

							fi(s.size()) {
								string str1;
								string str2;

								str1 = s.substr(0, i);
								reverse(str1.begin(), str1.end());
								str2 = s.substr(i);

								if (ok(str1, n) && ok(str2, n)) return i;

							}

							return -1;
            } 
        
// BEGIN CUT HERE
	public:
	void run_test(int Case) { if ((Case == -1) || (Case == 0)) test_case_0(); if ((Case == -1) || (Case == 1)) test_case_1(); if ((Case == -1) || (Case == 2)) test_case_2(); if ((Case == -1) || (Case == 3)) test_case_3(); if ((Case == -1) || (Case == 4)) test_case_4(); if ((Case == -1) || (Case == 5)) test_case_5(); if ((Case == -1) || (Case == 6)) test_case_6(); }
	private:
	template <typename T> string print_array(const vector<T> &V) { ostringstream os; os << "{ "; for (typename vector<T>::const_iterator iter = V.begin(); iter != V.end(); ++iter) os << '\"' << *iter << "\","; os << " }"; return os.str(); }
	void verify_case(int Case, const int &Expected, const int &Received) { cerr << "Test Case #" << Case << "..."; if (Expected == Received) cerr << "PASSED" << endl; else { cerr << "FAILED" << endl; cerr << "\tExpected: \"" << Expected << '\"' << endl; cerr << "\tReceived: \"" << Received << '\"' << endl; } }
	void test_case_0() { string Arr0[] = {"BBAC"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 3; int Arg2 = 1; verify_case(0, Arg2, isRandom(Arg0, Arg1)); }
	void test_case_1() { string Arr0[] = {"BACAB",
 "BCA"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 3; int Arg2 = 2; verify_case(1, Arg2, isRandom(Arg0, Arg1)); }
	void test_case_2() { string Arr0[] = {"AAACBACBACBACBACBACBACB"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 3; int Arg2 = -1; verify_case(2, Arg2, isRandom(Arg0, Arg1)); }
	void test_case_3() { string Arr0[] = {"ABCDEABDECBAECDEDACB"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 5; int Arg2 = 0; verify_case(3, Arg2, isRandom(Arg0, Arg1)); }
	void test_case_4() { string Arr0[] = {"ABCABCABCABCABCABCABC",
 "ABCABCABCABCABCABCABC"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 22; int Arg2 = -1; verify_case(4, Arg2, isRandom(Arg0, Arg1)); }
	void test_case_5() { string Arr0[] = {"AAAAAAAAAAAAAAAA",
 "AAAAAAAAAAAAAAAA",
 "AAAAAAAAAAAAAAAA",
 "AAAAAAAAAAAAAAAA",
 "AAAAAAAAAAAAAAAA",
 "AAAAAAAAAAAAAAAA",
 "AAAAAAAAAAAAAAAA",
 "AAAAAAAAAAAAAAAA",
 "AAAAAAAAAAAAAAAA",
 "AAAAAAAAAAAAAAAA"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 1; int Arg2 = 0; verify_case(5, Arg2, isRandom(Arg0, Arg1)); }
	void test_case_6() { string Arr0[] = {"ADEF"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 12; int Arg2 = 0; verify_case(6, Arg2, isRandom(Arg0, Arg1)); }

// END CUT HERE
 
        }; 

    // BEGIN CUT HERE 
    int main()
        {
        CDPlayer ___test; 
        ___test.run_test(-1); 
        } 
    // END CUT HERE 
    

