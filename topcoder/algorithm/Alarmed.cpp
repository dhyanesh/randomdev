// BEGIN CUT HERE
// PROBLEM STATEMENT
// Our alarm system is intended to keep intruders from 
// entering at the front door
// of a square room, crossing the room, and then exiting 
// through the back door. It
// consists of noise sensors located at various points on the 
// floor of the room.
// Each sensor has its own threshold sound level -- it will 
// warn us if the
// sound level at the sensor exceeeds its threshold.
// 
// The sound generated by an intruder attenuates according to 
// an inverse square
// law. Specifically, at a distance r from an intruder, the 
// sound level will be
// A/r2, where A is the noisiness of the intruder.
// 
// The room is square, with each side of length 100.0. The 
// coordinates of the
// southwest corner are (x=0,y=0) and the coordinates of the 
// northeast corner are
// (x=100,y=100). The intruder will enter at (50,0) and exit 
// at (50,100).
// 
// Given vector <int>s x, y, and threshold return the largest 
// value of A that will allow an
// intruder to walk through the room without setting off an 
// alarm. 
// The i-th sensor is described by the ith elements of x, y, 
// and threshold. Note 
// that we cannot expect an intruder to limit his path to 
// integer coordinates!
// 
// 
// 
// DEFINITION
// Class:Alarmed
// Method:noise
// Parameters:vector <int>, vector <int>, vector <int>
// Returns:double
// Method signature:double noise(vector <int> x, vector <int> 
// y, vector <int> threshold)
// 
// 
// NOTES
// -A return value with either an absolute or relative error 
// of less than 1.0E-9 is considered correct.
// 
// 
// CONSTRAINTS
// -x will contain between 1 and 50 elements, inclusive.
// -x, y and threshold will contain the same number of 
// elements.
// -All sensor locations will be distinct.
// -Each element of x and y will be between 1 and 99, 
// inclusive.
// -Each element of threshold will be between 1 and 10,000, 
// inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {50}
// {2}
// {87}
// 
// Returns: 347.99999999999994
// 
// 
// 
//    Here there is one sensor, very close to the front door. 
// The intruder can
//    move along the wall where he enters and continue to 
// follow the walls until
//    he gets to the exit door. The closest he will get to 
// the one sensor is at the
//    point where he enters the room which is a distance of 2 
// away. If A is 348 the
//    alarm will not sound, since 348/(2*2), the largest 
// sound level at the 
//    sensor, does not exceed the threshold of the sensor, 
// but any bigger value 
//    of A will sound the alarm.
// 
// 
// 
// 1)
// {1,99}
// {50,50}
// {1,1}
// 
// Returns: 2400.9999999999995
// 
// 
// 
//    There are two very sensitive sensors located near the 
// east wall and the
//    west wall. The best path for an intruder is straight 
// through the room. Then
//    the closest he will get to a sensor is a distance of 
// 49, and the crucial value
//    of A will be 49*49 = 2401.0.
// 
// 
// 2)
// {3,11,2,62,91}
// {90,10,75,25,50}
// {5,4,3,2,1}
// 
// Returns: 1537.9999999999998
// 
// 
// 
// 
// 3)
// { 1,99}
// { 50,50}
// { 1, 2}
// 
// Returns: 3295.5717878751793
// 
// 
// 
// END CUT HERE
#line 128 "Alarmed.cpp"
#include <string>   
#include <vector>   
#include <iostream>    
#include <sstream>    
#include <algorithm>   
#include <numeric>   
#include <functional>    
#include <map>    
#include <set>    
#include <cassert>   
#include <list>    
#include <deque>    
#include <iomanip>    
#include <cstring>    
#include <cmath>    
#include <cstdio>    
#include <cctype>   

using namespace std;   

#define fi(n) for(int i=0;i<(n);i++)
#define fj(n) for(int j=0;j<(n);j++)
#define f(i,a,b) for(int (i)=(a);(i)<(b);(i)++)

#define SQR(x) (x)*(x)

typedef vector <int> VI;   
typedef vector <string> VS;   
typedef vector <VI> VVI;   

bool to[55][55];

bool ok(VI &x, VI &y, VI&t, double a) {
	memset(to,0,sizeof(to));

	fi(x.size()) {
		to[i][i]=true;
		f(j,i+1,x.size()) {
			double dist = SQR(x[i]-x[j]) + SQR(y[i]-y[j]);

			if (sqrt(dist) < sqrt(a/t[i]) + sqrt(a/t[j])) {
				to[i][j]=true;
				to[j][i]=true;
			}
		}


		double dist = SQR(x[i]-50) + SQR(y[i]);
		if (a/dist >= t-1e9) return false;
	}
}

    class Alarmed
        { 
        public: 
        double noise(vector <int> x, vector <int> y, vector <int> t) 
            { 
							double low = 0.0;
							double high = 2.0e9;

							fi(100){ 
								double mid = (low + high) / 2.0;
								if (ok(x,y,t,mid)) {
									low = mid;
								} else high = mid;
							}

							return low;
            } 
        
// BEGIN CUT HERE
	public:
	void run_test(int Case) { if ((Case == -1) || (Case == 0)) test_case_0(); if ((Case == -1) || (Case == 1)) test_case_1(); if ((Case == -1) || (Case == 2)) test_case_2(); if ((Case == -1) || (Case == 3)) test_case_3(); }
	private:
	template <typename T> string print_array(const vector<T> &V) { ostringstream os; os << "{ "; for (typename vector<T>::const_iterator iter = V.begin(); iter != V.end(); ++iter) os << '\"' << *iter << "\","; os << " }"; return os.str(); }
	void verify_case(int Case, const double &Expected, const double &Received) { cerr << "Test Case #" << Case << "..."; if (Expected == Received) cerr << "PASSED" << endl; else { cerr << "FAILED" << endl; cerr << "\tExpected: \"" << Expected << '\"' << endl; cerr << "\tReceived: \"" << Received << '\"' << endl; } }
	void test_case_0() { int Arr0[] = {50}; vector <int> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arr1[] = {2}; vector <int> Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0]))); int Arr2[] = {87}; vector <int> Arg2(Arr2, Arr2 + (sizeof(Arr2) / sizeof(Arr2[0]))); double Arg3 = 347.99999999999994; verify_case(0, Arg3, noise(Arg0, Arg1, Arg2)); }
	void test_case_1() { int Arr0[] = {1,99}; vector <int> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arr1[] = {50,50}; vector <int> Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0]))); int Arr2[] = {1,1}; vector <int> Arg2(Arr2, Arr2 + (sizeof(Arr2) / sizeof(Arr2[0]))); double Arg3 = 2400.9999999999995; verify_case(1, Arg3, noise(Arg0, Arg1, Arg2)); }
	void test_case_2() { int Arr0[] = {3,11,2,62,91}; vector <int> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arr1[] = {90,10,75,25,50}; vector <int> Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0]))); int Arr2[] = {5,4,3,2,1}; vector <int> Arg2(Arr2, Arr2 + (sizeof(Arr2) / sizeof(Arr2[0]))); double Arg3 = 1537.9999999999998; verify_case(2, Arg3, noise(Arg0, Arg1, Arg2)); }
	void test_case_3() { int Arr0[] = { 1,99}; vector <int> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arr1[] = { 50,50}; vector <int> Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0]))); int Arr2[] = { 1, 2}; vector <int> Arg2(Arr2, Arr2 + (sizeof(Arr2) / sizeof(Arr2[0]))); double Arg3 = 3295.5717878751793; verify_case(3, Arg3, noise(Arg0, Arg1, Arg2)); }

// END CUT HERE
 
        }; 

    // BEGIN CUT HERE 
    int main()
        {
        Alarmed ___test; 
        ___test.run_test(-1); 
        } 
    // END CUT HERE 
    

